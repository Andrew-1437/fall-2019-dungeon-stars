using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Weapon : MonoBehaviour
{
    /// <summary>
    /// Array of the projectiles this weapon will shoot. 
    /// Position in the array corresponds to the power level
    /// (Position 0 will fire with level 1 power level, etc)
    /// </summary>
    public GameObject[] PowerLevels;

    /// <summary>Time it takes to fire the next projectile after the weapon has fired once</summary>
    public float FireRate;

    /// <summary>Number of times the weapon can be fired until it's ammo is depleted</summary>
    public int Capacity;

    /// <summary>Units of heat generated by the weapon per shot</summary>
    public float HeatGen;

    /// <summary>Score points deducted for every time the weapon is fired</summary>
    public int WeaponCost;

    /// <summary>If true, the weapon can only be fired on key down, instead of key held down. Fire rate still applies</summary>
    public bool EnableSemiAuto;

    private float nextFire;

    [HideInInspector]
    public int Ammo;
    

    // Start is called before the first frame update
    public void Start()
    {
        if (Capacity > 0)
        {
            Ammo = Capacity;
        }
        nextFire = 0;
    }

    /// <summary>
    /// Attempts to fire the weapon
    /// </summary>
    /// <param name="spawner">Transform to spawn projectile in</param>
    /// <param name="player">Player firing the projectile</param>
    /// <param name="fireRateMod">Fire rate modifier based on player's buffs</param>
    /// <param name="heatFireRateMod">Fire rate modifier when there is excessive heat</param>
    /// <param name="fireButton">Name of the button used to shoot the weapon</param>
    public void Fire(Transform spawner, PlayerController player, float fireRateMod, float heatFireRateMod, string fireButton)
    {
        int powerLevel = Mathf.Clamp(player.level, 0, PowerLevels.Length - 1);

        // Only shoot when key is pressed down if semi auto
        if(EnableSemiAuto && !Input.GetButtonDown(fireButton))
        {
            return;
        }

        // Only shoot when ready to fire again
        if (Time.time < nextFire)
        {
            return;
        }

        // Don't shoot when no ammo
        if (Capacity > 0 && Ammo <= 0)
        {
            return;
        }

        // Set the next fire time based on the weapon's fire rate
        if (FireRate > 0)
        {
            nextFire = Time.time + FireRate *
                    fireRateMod * heatFireRateMod * OmniController.omniController.playerFireRateScale;
        }

        // Spawn projectile and delete it 5 seconds later if it is not already deleted
        Destroy(
            Instantiate(PowerLevels[powerLevel], spawner.position, spawner.rotation),
            20);
        // Subtract score for every shot fired
        GM.gameController.AddRawScore(-Mathf.Max(WeaponCost - Mathf.FloorToInt(WeaponCost * (1f - fireRateMod)), 0));

        // Deduct one from ammo each time weapon is fired
        if (Capacity > 0)
        {
            Ammo = Mathf.Clamp(Ammo - 1, 0, Capacity);
        }

        // Add heat if the ship and weapon use heat
        if (HeatGen > 0 && player.enableHeat)
        {
            player.AddHeat(HeatGen);
        }
    }

    public void ReplenishAmmo()
    {
        Ammo = Capacity;
    }
}


